{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\smareedu\\\\OneDrive - Hitachi Vantara\\\\Desktop\\\\teams_transcript_ppt_simple\\\\frontend\\\\src\\\\components\\\\LandingPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useDropzone } from 'react-dropzone';\n// import axios from 'axios';\n// import Header from './Header';\n// import './LandingPage.css';\n\n// const LandingPage = ({ userName }) => {\n//     const [file, setFile] = useState(null);\n//     const [summary, setSummary] = useState('');\n//     const [notes, setNotes] = useState('');\n//     const [pptFileUrl, setPptFileUrl] = useState('');\n//     const [loading, setLoading] = useState(false);\n//     const [submitStatus, setSubmitStatus] = useState('');\n\n//     const onDrop = (acceptedFiles) => {\n//         if (acceptedFiles.length > 0 && (acceptedFiles[0].type === 'text/plain' || acceptedFiles[0].type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\n//             setFile(acceptedFiles[0]);\n//             setSubmitStatus('');\n//             setSummary('');\n//             setNotes('');\n//             setPptFileUrl(''); // Reset PPT URL on new file\n//         } else {\n//             alert('Please upload a .txt or .docx file.');\n//         }\n//     };\n\n//     const { getRootProps, getInputProps } = useDropzone({ onDrop, accept: { 'text/plain': ['.txt'], 'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'] } });\n\n//     const handleSubmit = async () => {\n//         if (!file) return alert('Please upload a file first.');\n//         setLoading(true);\n//         setSubmitStatus('Submitting...');\n//         const formData = new FormData();\n//         formData.append('file', file);\n//         try {\n//             const response = await axios.post('http://127.0.0.1:8000/api/upload/', formData, {\n//                 headers: { 'Content-Type': 'multipart/form-data' },\n//             });\n//             setSubmitStatus('File uploaded successfully!');\n//             console.log('Upload response:', response.data);\n//         } catch (error) {\n//             setSubmitStatus('Failed to upload file. Please try again.');\n//             console.error('Upload error:', error);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const fetchContent = async (endpoint) => {\n//         if (!file) return alert('Please upload a file first.');\n//         setLoading(true);\n//         try {\n//             let response;\n//             const fileName = encodeURIComponent(file.name);\n//             if (endpoint === 'ppt') {\n//                 response = await axios.get(`http://127.0.0.1:8000/api/generate_${endpoint}/?file=${fileName}`, {\n//                     headers: { 'Content-Type': 'application/json' },\n//                 });\n//                 console.log('PPT API response:', response.data);\n//                 if (response.data.message === 'PPT generated successfully.' && response.data.ppt_file) {\n//                     const pptUrl = `http://127.0.0.1:8000/api/${response.data.ppt_file}`; // Add /api prefix\n//                     // Fetch the PPT file as a blob to force download\n//                     const fileResponse = await axios.get(pptUrl, {\n//                         responseType: 'blob',\n//                         headers: { 'Accept': 'application/vnd.openxmlformats-officedocument.presentationml.presentation' },\n//                     });\n//                     console.log('PPT file response status:', fileResponse.status);\n//                     const url = window.URL.createObjectURL(new Blob([fileResponse.data]));\n//                     const link = document.createElement('a');\n//                     link.href = url;\n//                     link.download = 'presentation.pptx';\n//                     document.body.appendChild(link);\n//                     link.click();\n//                     document.body.removeChild(link);\n//                     window.URL.revokeObjectURL(url);\n//                     setPptFileUrl(pptUrl); // Update state for UI confirmation\n//                 } else {\n//                     throw new Error('PPT generation failed or invalid response');\n//                 }\n//             } else {\n//                 response = await axios.get(`http://127.0.0.1:8000/api/generate_${endpoint}/?file=${fileName}`, {\n//                     headers: { 'Content-Type': 'application/json' },\n//                 });\n//                 if (endpoint === 'summary') setSummary(response.data.summary || '');\n//                 else if (endpoint === 'notes') setNotes(response.data.notes || '');\n//             }\n//         } catch (error) {\n//             console.error(`Error fetching ${endpoint}:`, error.response ? error.response.data : error.message);\n//             alert(`Failed to fetch ${endpoint}. Check console for details.`);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"landing-page\">\n//             <Header userName={userName} />\n//             <h2 className=\"page-title\">AutoReQ</h2>\n//             <div className=\"wrapper-for-drop\">\n//                 <div {...getRootProps()} className=\"dropzone\">\n//                     <input {...getInputProps()} />\n//                     <p className=\"dropzone-text\">Drag and drop a .txt or .docx file here, or click to select</p>\n//                     {file && <p className=\"file-name\">{file.name}</p>}\n//                 </div>\n//             </div>\n//             <button onClick={handleSubmit} className=\"submit-button\" disabled={loading}>\n//                 {loading ? 'Submitting...' : 'Submit'}\n//             </button>\n//             {submitStatus && <p className=\"submit-status\">{submitStatus}</p>}\n//             <div className=\"button-group\">\n//                 <button onClick={() => fetchContent('summary')} className=\"action-button\" disabled={loading}>\n//                     Generate Summary\n//                 </button>\n//                 <button onClick={() => fetchContent('notes')} className=\"action-button\" disabled={loading}>\n//                     Generate Notes\n//                 </button>\n//                 <button onClick={() => fetchContent('ppt')} className=\"action-button\" disabled={loading}>\n//                     Generate PPT\n//                 </button>\n//             </div>\n//             {(summary || notes || pptFileUrl) && (\n//                 <div className=\"content-box\">\n//                     {summary && <div className=\"content-section\"><h3>Summary</h3><p>{summary}</p></div>}\n//                     {notes && <div className=\"content-section\"><h3>Notes</h3><p>{notes}</p></div>}\n//                     {pptFileUrl && (\n//                         <div className=\"content-section\">\n//                             <h3>PPT Generated</h3>\n//                             <p>Download completed. Check your downloads folder.</p>\n//                         </div>\n//                     )}\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default LandingPage;\n\n// frontend/src/LandingPage.js\nimport React, { useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport axios from 'axios';\nimport Header from './Header';\nimport './LandingPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LandingPage = ({\n  userName\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [summary, setSummary] = useState('');\n  const [notes, setNotes] = useState('');\n  const [pptFileUrl, setPptFileUrl] = useState(''); // Store PPT file URL for preview/download\n  const [loading, setLoading] = useState(false);\n  const [submitStatus, setSubmitStatus] = useState('');\n  const onDrop = acceptedFiles => {\n    if (acceptedFiles.length > 0 && (acceptedFiles[0].type === 'text/plain' || acceptedFiles[0].type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\n      setFile(acceptedFiles[0]);\n      setSubmitStatus('');\n      setSummary('');\n      setNotes('');\n      setPptFileUrl(''); // Reset PPT URL on new file\n    } else {\n      alert('Please upload a .txt or .docx file.');\n    }\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'text/plain': ['.txt'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']\n    }\n  });\n  const handleSubmit = async () => {\n    if (!file) return alert('Please upload a file first.');\n    setLoading(true);\n    setSubmitStatus('Submitting...');\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/api/upload/', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setSubmitStatus('File uploaded successfully!');\n      console.log('Upload response:', response.data);\n    } catch (error) {\n      setSubmitStatus('Failed to upload file. Please try again.');\n      console.error('Upload error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchContent = async endpoint => {\n    if (!file) return alert('Please upload a file first.');\n    setLoading(true);\n    try {\n      let response;\n      const fileName = encodeURIComponent(file.name);\n      if (endpoint === 'ppt') {\n        response = await axios.get(`http://127.0.0.1:8000/api/generate_${endpoint}/?file=${fileName}`, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('PPT API response:', response.data);\n        if (response.data.message === 'PPT generated successfully.' && response.data.ppt_file) {\n          const pptUrl = `http://127.0.0.1:8000/api/${response.data.ppt_file}`; // Add /api prefix\n          setPptFileUrl(pptUrl); // Set URL for preview\n        } else {\n          throw new Error('PPT generation failed or invalid response');\n        }\n      } else {\n        response = await axios.get(`http://127.0.0.1:8000/api/generate_${endpoint}/?file=${fileName}`, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (endpoint === 'summary') setSummary(response.data.summary || '');else if (endpoint === 'notes') setNotes(response.data.notes || '');\n      }\n    } catch (error) {\n      console.error(`Error fetching ${endpoint}:`, error.response ? error.response.data : error.message);\n      alert(`Failed to fetch ${endpoint}. Check console for details.`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDownload = () => {\n    if (pptFileUrl) {\n      axios.get(pptFileUrl, {\n        responseType: 'blob',\n        headers: {\n          'Accept': 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n        }\n      }).then(response => {\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = 'presentation.pptx';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url);\n      }).catch(error => {\n        console.error('Download error:', error);\n        alert('Failed to download PPT. Check console for details.');\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"landing-page\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      userName: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"page-title\",\n      children: \"AutoReQ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper-for-drop\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ...getRootProps(),\n        className: \"dropzone\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"dropzone-text\",\n          children: \"Drag and drop a .txt or .docx file here, or click to select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this), file && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"file-name\",\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      className: \"submit-button\",\n      disabled: loading,\n      children: loading ? 'Submitting...' : 'Submit'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this), submitStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"submit-status\",\n      children: submitStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchContent('summary'),\n        className: \"action-button\",\n        disabled: loading,\n        children: \"Generate Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchContent('notes'),\n        className: \"action-button\",\n        disabled: loading,\n        children: \"Generate Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchContent('ppt'),\n        className: \"action-button\",\n        disabled: loading,\n        children: \"Generate PPT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), (summary || notes || pptFileUrl) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-box\",\n      children: [summary && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 66\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: summary\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 82\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 33\n      }, this), notes && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 64\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: notes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 78\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 31\n      }, this), pptFileUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"PPT Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '10px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n            title: \"PPT Preview\",\n            src: pptFileUrl,\n            width: \"100%\",\n            height: \"400px\",\n            style: {\n              border: '1px solid #ccc'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Your browser does not support iframes, or the PPT cannot be previewed. Please download the file.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDownload,\n          className: \"action-button\",\n          children: \"Download PPT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 9\n  }, this);\n};\n_s(LandingPage, \"GbwrfK4FlLLz5veDdgJx8AxWm/8=\", false, function () {\n  return [useDropzone];\n});\n_c = LandingPage;\nexport default LandingPage;\nvar _c;\n$RefreshReg$(_c, \"LandingPage\");","map":{"version":3,"names":["React","useState","useDropzone","axios","Header","jsxDEV","_jsxDEV","LandingPage","userName","_s","file","setFile","summary","setSummary","notes","setNotes","pptFileUrl","setPptFileUrl","loading","setLoading","submitStatus","setSubmitStatus","onDrop","acceptedFiles","length","type","alert","getRootProps","getInputProps","accept","handleSubmit","formData","FormData","append","response","post","headers","console","log","data","error","fetchContent","endpoint","fileName","encodeURIComponent","name","get","message","ppt_file","pptUrl","Error","handleDownload","responseType","then","url","window","URL","createObjectURL","Blob","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","catch","className","children","_jsxFileName","lineNumber","columnNumber","onClick","disabled","style","marginBottom","title","src","width","height","border","_c","$RefreshReg$"],"sources":["C:/Users/smareedu/OneDrive - Hitachi Vantara/Desktop/teams_transcript_ppt_simple/frontend/src/components/LandingPage.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useDropzone } from 'react-dropzone';\r\n// import axios from 'axios';\r\n// import Header from './Header';\r\n// import './LandingPage.css';\r\n\r\n// const LandingPage = ({ userName }) => {\r\n//     const [file, setFile] = useState(null);\r\n//     const [summary, setSummary] = useState('');\r\n//     const [notes, setNotes] = useState('');\r\n//     const [pptFileUrl, setPptFileUrl] = useState('');\r\n//     const [loading, setLoading] = useState(false);\r\n//     const [submitStatus, setSubmitStatus] = useState('');\r\n\r\n//     const onDrop = (acceptedFiles) => {\r\n//         if (acceptedFiles.length > 0 && (acceptedFiles[0].type === 'text/plain' || acceptedFiles[0].type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\r\n//             setFile(acceptedFiles[0]);\r\n//             setSubmitStatus('');\r\n//             setSummary('');\r\n//             setNotes('');\r\n//             setPptFileUrl(''); // Reset PPT URL on new file\r\n//         } else {\r\n//             alert('Please upload a .txt or .docx file.');\r\n//         }\r\n//     };\r\n\r\n//     const { getRootProps, getInputProps } = useDropzone({ onDrop, accept: { 'text/plain': ['.txt'], 'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'] } });\r\n\r\n//     const handleSubmit = async () => {\r\n//         if (!file) return alert('Please upload a file first.');\r\n//         setLoading(true);\r\n//         setSubmitStatus('Submitting...');\r\n//         const formData = new FormData();\r\n//         formData.append('file', file);\r\n//         try {\r\n//             const response = await axios.post('http://127.0.0.1:8000/api/upload/', formData, {\r\n//                 headers: { 'Content-Type': 'multipart/form-data' },\r\n//             });\r\n//             setSubmitStatus('File uploaded successfully!');\r\n//             console.log('Upload response:', response.data);\r\n//         } catch (error) {\r\n//             setSubmitStatus('Failed to upload file. Please try again.');\r\n//             console.error('Upload error:', error);\r\n//         } finally {\r\n//             setLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     const fetchContent = async (endpoint) => {\r\n//         if (!file) return alert('Please upload a file first.');\r\n//         setLoading(true);\r\n//         try {\r\n//             let response;\r\n//             const fileName = encodeURIComponent(file.name);\r\n//             if (endpoint === 'ppt') {\r\n//                 response = await axios.get(`http://127.0.0.1:8000/api/generate_${endpoint}/?file=${fileName}`, {\r\n//                     headers: { 'Content-Type': 'application/json' },\r\n//                 });\r\n//                 console.log('PPT API response:', response.data);\r\n//                 if (response.data.message === 'PPT generated successfully.' && response.data.ppt_file) {\r\n//                     const pptUrl = `http://127.0.0.1:8000/api/${response.data.ppt_file}`; // Add /api prefix\r\n//                     // Fetch the PPT file as a blob to force download\r\n//                     const fileResponse = await axios.get(pptUrl, {\r\n//                         responseType: 'blob',\r\n//                         headers: { 'Accept': 'application/vnd.openxmlformats-officedocument.presentationml.presentation' },\r\n//                     });\r\n//                     console.log('PPT file response status:', fileResponse.status);\r\n//                     const url = window.URL.createObjectURL(new Blob([fileResponse.data]));\r\n//                     const link = document.createElement('a');\r\n//                     link.href = url;\r\n//                     link.download = 'presentation.pptx';\r\n//                     document.body.appendChild(link);\r\n//                     link.click();\r\n//                     document.body.removeChild(link);\r\n//                     window.URL.revokeObjectURL(url);\r\n//                     setPptFileUrl(pptUrl); // Update state for UI confirmation\r\n//                 } else {\r\n//                     throw new Error('PPT generation failed or invalid response');\r\n//                 }\r\n//             } else {\r\n//                 response = await axios.get(`http://127.0.0.1:8000/api/generate_${endpoint}/?file=${fileName}`, {\r\n//                     headers: { 'Content-Type': 'application/json' },\r\n//                 });\r\n//                 if (endpoint === 'summary') setSummary(response.data.summary || '');\r\n//                 else if (endpoint === 'notes') setNotes(response.data.notes || '');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(`Error fetching ${endpoint}:`, error.response ? error.response.data : error.message);\r\n//             alert(`Failed to fetch ${endpoint}. Check console for details.`);\r\n//         } finally {\r\n//             setLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"landing-page\">\r\n//             <Header userName={userName} />\r\n//             <h2 className=\"page-title\">AutoReQ</h2>\r\n//             <div className=\"wrapper-for-drop\">\r\n//                 <div {...getRootProps()} className=\"dropzone\">\r\n//                     <input {...getInputProps()} />\r\n//                     <p className=\"dropzone-text\">Drag and drop a .txt or .docx file here, or click to select</p>\r\n//                     {file && <p className=\"file-name\">{file.name}</p>}\r\n//                 </div>\r\n//             </div>\r\n//             <button onClick={handleSubmit} className=\"submit-button\" disabled={loading}>\r\n//                 {loading ? 'Submitting...' : 'Submit'}\r\n//             </button>\r\n//             {submitStatus && <p className=\"submit-status\">{submitStatus}</p>}\r\n//             <div className=\"button-group\">\r\n//                 <button onClick={() => fetchContent('summary')} className=\"action-button\" disabled={loading}>\r\n//                     Generate Summary\r\n//                 </button>\r\n//                 <button onClick={() => fetchContent('notes')} className=\"action-button\" disabled={loading}>\r\n//                     Generate Notes\r\n//                 </button>\r\n//                 <button onClick={() => fetchContent('ppt')} className=\"action-button\" disabled={loading}>\r\n//                     Generate PPT\r\n//                 </button>\r\n//             </div>\r\n//             {(summary || notes || pptFileUrl) && (\r\n//                 <div className=\"content-box\">\r\n//                     {summary && <div className=\"content-section\"><h3>Summary</h3><p>{summary}</p></div>}\r\n//                     {notes && <div className=\"content-section\"><h3>Notes</h3><p>{notes}</p></div>}\r\n//                     {pptFileUrl && (\r\n//                         <div className=\"content-section\">\r\n//                             <h3>PPT Generated</h3>\r\n//                             <p>Download completed. Check your downloads folder.</p>\r\n//                         </div>\r\n//                     )}\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default LandingPage;\r\n\r\n// frontend/src/LandingPage.js\r\nimport React, { useState } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport axios from 'axios';\r\nimport Header from './Header';\r\nimport './LandingPage.css';\r\n\r\nconst LandingPage = ({ userName }) => {\r\n    const [file, setFile] = useState(null);\r\n    const [summary, setSummary] = useState('');\r\n    const [notes, setNotes] = useState('');\r\n    const [pptFileUrl, setPptFileUrl] = useState(''); // Store PPT file URL for preview/download\r\n    const [loading, setLoading] = useState(false);\r\n    const [submitStatus, setSubmitStatus] = useState('');\r\n\r\n    const onDrop = (acceptedFiles) => {\r\n        if (acceptedFiles.length > 0 && (acceptedFiles[0].type === 'text/plain' || acceptedFiles[0].type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\r\n            setFile(acceptedFiles[0]);\r\n            setSubmitStatus('');\r\n            setSummary('');\r\n            setNotes('');\r\n            setPptFileUrl(''); // Reset PPT URL on new file\r\n        } else {\r\n            alert('Please upload a .txt or .docx file.');\r\n        }\r\n    };\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({ onDrop, accept: { 'text/plain': ['.txt'], 'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'] } });\r\n\r\n    const handleSubmit = async () => {\r\n        if (!file) return alert('Please upload a file first.');\r\n        setLoading(true);\r\n        setSubmitStatus('Submitting...');\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        try {\r\n            const response = await axios.post('http://127.0.0.1:8000/api/upload/', formData, {\r\n                headers: { 'Content-Type': 'multipart/form-data' },\r\n            });\r\n            setSubmitStatus('File uploaded successfully!');\r\n            console.log('Upload response:', response.data);\r\n        } catch (error) {\r\n            setSubmitStatus('Failed to upload file. Please try again.');\r\n            console.error('Upload error:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchContent = async (endpoint) => {\r\n        if (!file) return alert('Please upload a file first.');\r\n        setLoading(true);\r\n        try {\r\n            let response;\r\n            const fileName = encodeURIComponent(file.name);\r\n            if (endpoint === 'ppt') {\r\n                response = await axios.get(`http://127.0.0.1:8000/api/generate_${endpoint}/?file=${fileName}`, {\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                });\r\n                console.log('PPT API response:', response.data);\r\n                if (response.data.message === 'PPT generated successfully.' && response.data.ppt_file) {\r\n                    const pptUrl = `http://127.0.0.1:8000/api/${response.data.ppt_file}`; // Add /api prefix\r\n                    setPptFileUrl(pptUrl); // Set URL for preview\r\n                } else {\r\n                    throw new Error('PPT generation failed or invalid response');\r\n                }\r\n            } else {\r\n                response = await axios.get(`http://127.0.0.1:8000/api/generate_${endpoint}/?file=${fileName}`, {\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                });\r\n                if (endpoint === 'summary') setSummary(response.data.summary || '');\r\n                else if (endpoint === 'notes') setNotes(response.data.notes || '');\r\n            }\r\n        } catch (error) {\r\n            console.error(`Error fetching ${endpoint}:`, error.response ? error.response.data : error.message);\r\n            alert(`Failed to fetch ${endpoint}. Check console for details.`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleDownload = () => {\r\n        if (pptFileUrl) {\r\n            axios.get(pptFileUrl, {\r\n                responseType: 'blob',\r\n                headers: { 'Accept': 'application/vnd.openxmlformats-officedocument.presentationml.presentation' },\r\n            }).then((response) => {\r\n                const url = window.URL.createObjectURL(new Blob([response.data]));\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n                link.download = 'presentation.pptx';\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                document.body.removeChild(link);\r\n                window.URL.revokeObjectURL(url);\r\n            }).catch((error) => {\r\n                console.error('Download error:', error);\r\n                alert('Failed to download PPT. Check console for details.');\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"landing-page\">\r\n            <Header userName={userName} />\r\n            <h2 className=\"page-title\">AutoReQ</h2>\r\n            <div className=\"wrapper-for-drop\">\r\n                <div {...getRootProps()} className=\"dropzone\">\r\n                    <input {...getInputProps()} />\r\n                    <p className=\"dropzone-text\">Drag and drop a .txt or .docx file here, or click to select</p>\r\n                    {file && <p className=\"file-name\">{file.name}</p>}\r\n                </div>\r\n            </div>\r\n            <button onClick={handleSubmit} className=\"submit-button\" disabled={loading}>\r\n                {loading ? 'Submitting...' : 'Submit'}\r\n            </button>\r\n            {submitStatus && <p className=\"submit-status\">{submitStatus}</p>}\r\n            <div className=\"button-group\">\r\n                <button onClick={() => fetchContent('summary')} className=\"action-button\" disabled={loading}>\r\n                    Generate Summary\r\n                </button>\r\n                <button onClick={() => fetchContent('notes')} className=\"action-button\" disabled={loading}>\r\n                    Generate Notes\r\n                </button>\r\n                <button onClick={() => fetchContent('ppt')} className=\"action-button\" disabled={loading}>\r\n                    Generate PPT\r\n                </button>\r\n            </div>\r\n            {(summary || notes || pptFileUrl) && (\r\n                <div className=\"content-box\">\r\n                    {summary && <div className=\"content-section\"><h3>Summary</h3><p>{summary}</p></div>}\r\n                    {notes && <div className=\"content-section\"><h3>Notes</h3><p>{notes}</p></div>}\r\n                    {pptFileUrl && (\r\n                        <div className=\"content-section\">\r\n                            <h3>PPT Preview</h3>\r\n                            <div style={{ marginBottom: '10px' }}>\r\n                                <iframe\r\n                                    title=\"PPT Preview\"\r\n                                    src={pptFileUrl}\r\n                                    width=\"100%\"\r\n                                    height=\"400px\"\r\n                                    style={{ border: '1px solid #ccc' }}\r\n                                >\r\n                                    <p>Your browser does not support iframes, or the PPT cannot be previewed. Please download the file.</p>\r\n                                </iframe>\r\n                            </div>\r\n                            <button onClick={handleDownload} className=\"action-button\">\r\n                                Download PPT\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LandingPage;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAG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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}