{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\smareedu\\\\OneDrive - Hitachi Vantara\\\\Desktop\\\\teams_transcript_ppt_simple\\\\frontend\\\\src\\\\components\\\\LandingPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useDropzone } from 'react-dropzone';\n// import axios from 'axios';\n// import Header from './Header';\n// import './LandingPage.css';\n\n// const LandingPage = ({ userName }) => {\n//     const [file, setFile] = useState(null);\n//     const [summary, setSummary] = useState('');\n//     const [notes, setNotes] = useState('');\n//     const [pptContent, setPptContent] = useState('');\n//     const [loading, setLoading] = useState(false);\n//     const [submitStatus, setSubmitStatus] = useState('');\n\n//     const onDrop = (acceptedFiles) => {\n//         if (acceptedFiles.length > 0 && (acceptedFiles[0].type === 'text/plain' || acceptedFiles[0].type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\n//             setFile(acceptedFiles[0]);\n//             setSubmitStatus('');\n//         } else {\n//             alert('Please upload a .txt or .docx file.');\n//         }\n//     };\n\n//     const { getRootProps, getInputProps } = useDropzone({ onDrop, accept: { 'text/plain': ['.txt'], 'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'] } });\n\n//     const handleSubmit = async () => {\n//         if (!file) return alert('Please upload a file first.');\n//         setLoading(true);\n//         setSubmitStatus('Submitting...');\n//         const formData = new FormData();\n//         formData.append('file', file);\n//         try {\n//             const response = await axios.post('/api/submit', formData, {\n//                 headers: { 'Content-Type': 'multipart/form-data' },\n//             });\n//             setSubmitStatus('File submitted successfully!');\n//             console.log('File submitted:', response.data);\n//         } catch (error) {\n//             setSubmitStatus('Failed to submit file. Please try again.');\n//             console.error('Submit error:', error);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const fetchContent = async (endpoint) => {\n//         if (!file) return alert('Please upload a file first.');\n//         setLoading(true);\n//         const formData = new FormData();\n//         formData.append('file', file);\n//         try {\n//             const response = await axios.post(`/api/${endpoint}`, formData, {\n//                 headers: { 'Content-Type': 'multipart/form-data' },\n//             });\n//             if (endpoint === 'summary') setSummary(response.data);\n//             else if (endpoint === 'notes') setNotes(response.data);\n//             else if (endpoint === 'ppt') setPptContent(response.data);\n//         } catch (error) {\n//             console.error('Error fetching content:', error);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const downloadPPT = () => {\n//         if (pptContent) {\n//             const blob = new Blob([pptContent], { type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation' });\n//             const url = window.URL.createObjectURL(blob);\n//             const link = document.createElement('a');\n//             link.href = url;\n//             link.download = 'presentation.pptx';\n//             document.body.appendChild(link);\n//             link.click();\n//             document.body.removeChild(link);\n//             window.URL.revokeObjectURL(url);\n//         }\n//     };\n\n//     return (\n//         <div className=\"landing-page\">\n//             <Header userName={userName} />\n//             <h2>AutoReQ</h2>\n//             <div className=\"wrapper-for-drop\">\n//                 <div {...getRootProps()} className=\"dropzone\">\n//                     <input {...getInputProps()} />\n//                     <p>Drag and drop a .txt or .docx file here</p>\n//                     {file && <p>{file.name}</p>}\n//                 </div>\n//             </div>\n//             <button onClick={handleSubmit} className=\"submit-button\">\n//                 Submit\n//             </button>\n//             {submitStatus && <p className=\"submit-status\">{submitStatus}</p>}\n//             <div className=\"button-group\">\n//                 <button onClick={() => fetchContent('summary')} disabled={loading}>Generate Summary</button>\n//                 <button onClick={() => fetchContent('notes')} disabled={loading}>Generate Notes</button>\n//                 <button onClick={() => fetchContent('ppt')} disabled={loading}>Generate PPT</button>\n//             </div>\n//             {(summary || notes || pptContent) && (\n//                 <div className=\"content-box\">\n//                     {summary && <p>{summary}</p>}\n//                     {notes && <p>{notes}</p>}\n//                     {pptContent && (\n//                         <>\n//                             <p>Preview: {pptContent}</p>\n//                             <button onClick={downloadPPT}>Download PPT</button>\n//                         </>\n//                     )}\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default LandingPage;\n\n// LandingPage.js\nimport React, { useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport axios from 'axios';\nimport Header from './Header';\nimport './LandingPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LandingPage = ({\n  userName\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [summary, setSummary] = useState('');\n  const [notes, setNotes] = useState('');\n  const [pptFileUrl, setPptFileUrl] = useState(''); // Store PPT file URL for download\n  const [loading, setLoading] = useState(false);\n  const [submitStatus, setSubmitStatus] = useState('');\n  const onDrop = acceptedFiles => {\n    if (acceptedFiles.length > 0 && (acceptedFiles[0].type === 'text/plain' || acceptedFiles[0].type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\n      setFile(acceptedFiles[0]);\n      setSubmitStatus('');\n      setSummary('');\n      setNotes('');\n      setPptFileUrl(''); // Reset PPT URL on new file\n    } else {\n      alert('Please upload a .txt or .docx file.');\n    }\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'text/plain': ['.txt'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']\n    }\n  });\n  const handleSubmit = async () => {\n    if (!file) return alert('Please upload a file first.');\n    setLoading(true);\n    setSubmitStatus('Submitting...');\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/api/upload/', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setSubmitStatus('File uploaded successfully!');\n      console.log('Upload response:', response.data);\n      // Optionally store a file ID or name from response if provided\n    } catch (error) {\n      setSubmitStatus('Failed to upload file. Please try again.');\n      console.error('Upload error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchContent = async endpoint => {\n    if (!file) return alert('Please upload a file first.');\n    setLoading(true);\n    try {\n      let response;\n      // Use GET with file name as a query parameter (adjust based on backend expectation)\n      const fileName = encodeURIComponent(file.name);\n      if (endpoint === 'ppt') {\n        response = await axios.get(`http://127.0.0.1:8000/api/generate_${endpoint}/?file=${fileName}`, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.data.message === 'PPT generated successfully') {\n          const pptUrl = `http://127.0.0.1:8000/${response.data.ppt_file}`;\n          setPptFileUrl(pptUrl);\n          const link = document.createElement('a');\n          link.href = pptUrl;\n          link.download = 'presentation.pptx';\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n        } else {\n          throw new Error('PPT generation failed');\n        }\n      } else {\n        response = await axios.get(`http://127.0.0.1:8000/api/generate_${endpoint}/?file=${fileName}`, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (endpoint === 'summary') setSummary(response.data.summary || '');else if (endpoint === 'notes') setNotes(response.data.notes || '');\n      }\n    } catch (error) {\n      console.error(`Error fetching ${endpoint}:`, error);\n      alert(`Failed to fetch ${endpoint}. Check console for details.`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"landing-page\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      userName: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"page-title\",\n      children: \"AutoReQ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper-for-drop\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ...getRootProps(),\n        className: \"dropzone\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"dropzone-text\",\n          children: \"Drag and drop a .txt or .docx file here, or click to select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this), file && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"file-name\",\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      className: \"submit-button\",\n      disabled: loading,\n      children: loading ? 'Submitting...' : 'Submit'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this), submitStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"submit-status\",\n      children: submitStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchContent('summary'),\n        className: \"action-button\",\n        disabled: loading,\n        children: \"Generate Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchContent('notes'),\n        className: \"action-button\",\n        disabled: loading,\n        children: \"Generate Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchContent('ppt'),\n        className: \"action-button\",\n        disabled: loading,\n        children: \"Generate PPT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this), (summary || notes || pptFileUrl) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-box\",\n      children: [summary && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 66\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: summary\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 82\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 33\n      }, this), notes && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 64\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: notes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 78\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 31\n      }, this), pptFileUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"PPT Generated\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Download completed. Check your downloads folder.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 9\n  }, this);\n};\n_s(LandingPage, \"GbwrfK4FlLLz5veDdgJx8AxWm/8=\", false, function () {\n  return [useDropzone];\n});\n_c = LandingPage;\nexport default LandingPage;\nvar _c;\n$RefreshReg$(_c, \"LandingPage\");","map":{"version":3,"names":["React","useState","useDropzone","axios","Header","jsxDEV","_jsxDEV","LandingPage","userName","_s","file","setFile","summary","setSummary","notes","setNotes","pptFileUrl","setPptFileUrl","loading","setLoading","submitStatus","setSubmitStatus","onDrop","acceptedFiles","length","type","alert","getRootProps","getInputProps","accept","handleSubmit","formData","FormData","append","response","post","headers","console","log","data","error","fetchContent","endpoint","fileName","encodeURIComponent","name","get","message","pptUrl","ppt_file","link","document","createElement","href","download","body","appendChild","click","removeChild","Error","className","children","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/smareedu/OneDrive - Hitachi Vantara/Desktop/teams_transcript_ppt_simple/frontend/src/components/LandingPage.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useDropzone } from 'react-dropzone';\r\n// import axios from 'axios';\r\n// import Header from './Header';\r\n// import './LandingPage.css';\r\n\r\n// const LandingPage = ({ userName }) => {\r\n//     const [file, setFile] = useState(null);\r\n//     const [summary, setSummary] = useState('');\r\n//     const [notes, setNotes] = useState('');\r\n//     const [pptContent, setPptContent] = useState('');\r\n//     const [loading, setLoading] = useState(false);\r\n//     const [submitStatus, setSubmitStatus] = useState('');\r\n\r\n//     const onDrop = (acceptedFiles) => {\r\n//         if (acceptedFiles.length > 0 && (acceptedFiles[0].type === 'text/plain' || acceptedFiles[0].type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\r\n//             setFile(acceptedFiles[0]);\r\n//             setSubmitStatus('');\r\n//         } else {\r\n//             alert('Please upload a .txt or .docx file.');\r\n//         }\r\n//     };\r\n\r\n//     const { getRootProps, getInputProps } = useDropzone({ onDrop, accept: { 'text/plain': ['.txt'], 'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'] } });\r\n\r\n//     const handleSubmit = async () => {\r\n//         if (!file) return alert('Please upload a file first.');\r\n//         setLoading(true);\r\n//         setSubmitStatus('Submitting...');\r\n//         const formData = new FormData();\r\n//         formData.append('file', file);\r\n//         try {\r\n//             const response = await axios.post('/api/submit', formData, {\r\n//                 headers: { 'Content-Type': 'multipart/form-data' },\r\n//             });\r\n//             setSubmitStatus('File submitted successfully!');\r\n//             console.log('File submitted:', response.data);\r\n//         } catch (error) {\r\n//             setSubmitStatus('Failed to submit file. Please try again.');\r\n//             console.error('Submit error:', error);\r\n//         } finally {\r\n//             setLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     const fetchContent = async (endpoint) => {\r\n//         if (!file) return alert('Please upload a file first.');\r\n//         setLoading(true);\r\n//         const formData = new FormData();\r\n//         formData.append('file', file);\r\n//         try {\r\n//             const response = await axios.post(`/api/${endpoint}`, formData, {\r\n//                 headers: { 'Content-Type': 'multipart/form-data' },\r\n//             });\r\n//             if (endpoint === 'summary') setSummary(response.data);\r\n//             else if (endpoint === 'notes') setNotes(response.data);\r\n//             else if (endpoint === 'ppt') setPptContent(response.data);\r\n//         } catch (error) {\r\n//             console.error('Error fetching content:', error);\r\n//         } finally {\r\n//             setLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     const downloadPPT = () => {\r\n//         if (pptContent) {\r\n//             const blob = new Blob([pptContent], { type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation' });\r\n//             const url = window.URL.createObjectURL(blob);\r\n//             const link = document.createElement('a');\r\n//             link.href = url;\r\n//             link.download = 'presentation.pptx';\r\n//             document.body.appendChild(link);\r\n//             link.click();\r\n//             document.body.removeChild(link);\r\n//             window.URL.revokeObjectURL(url);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"landing-page\">\r\n//             <Header userName={userName} />\r\n//             <h2>AutoReQ</h2>\r\n//             <div className=\"wrapper-for-drop\">\r\n//                 <div {...getRootProps()} className=\"dropzone\">\r\n//                     <input {...getInputProps()} />\r\n//                     <p>Drag and drop a .txt or .docx file here</p>\r\n//                     {file && <p>{file.name}</p>}\r\n//                 </div>\r\n//             </div>\r\n//             <button onClick={handleSubmit} className=\"submit-button\">\r\n//                 Submit\r\n//             </button>\r\n//             {submitStatus && <p className=\"submit-status\">{submitStatus}</p>}\r\n//             <div className=\"button-group\">\r\n//                 <button onClick={() => fetchContent('summary')} disabled={loading}>Generate Summary</button>\r\n//                 <button onClick={() => fetchContent('notes')} disabled={loading}>Generate Notes</button>\r\n//                 <button onClick={() => fetchContent('ppt')} disabled={loading}>Generate PPT</button>\r\n//             </div>\r\n//             {(summary || notes || pptContent) && (\r\n//                 <div className=\"content-box\">\r\n//                     {summary && <p>{summary}</p>}\r\n//                     {notes && <p>{notes}</p>}\r\n//                     {pptContent && (\r\n//                         <>\r\n//                             <p>Preview: {pptContent}</p>\r\n//                             <button onClick={downloadPPT}>Download PPT</button>\r\n//                         </>\r\n//                     )}\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default LandingPage;\r\n\r\n\r\n// LandingPage.js\r\nimport React, { useState } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport axios from 'axios';\r\nimport Header from './Header';\r\nimport './LandingPage.css';\r\n\r\nconst LandingPage = ({ userName }) => {\r\n    const [file, setFile] = useState(null);\r\n    const [summary, setSummary] = useState('');\r\n    const [notes, setNotes] = useState('');\r\n    const [pptFileUrl, setPptFileUrl] = useState(''); // Store PPT file URL for download\r\n    const [loading, setLoading] = useState(false);\r\n    const [submitStatus, setSubmitStatus] = useState('');\r\n\r\n    const onDrop = (acceptedFiles) => {\r\n        if (acceptedFiles.length > 0 && (acceptedFiles[0].type === 'text/plain' || acceptedFiles[0].type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\r\n            setFile(acceptedFiles[0]);\r\n            setSubmitStatus('');\r\n            setSummary('');\r\n            setNotes('');\r\n            setPptFileUrl(''); // Reset PPT URL on new file\r\n        } else {\r\n            alert('Please upload a .txt or .docx file.');\r\n        }\r\n    };\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({ onDrop, accept: { 'text/plain': ['.txt'], 'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'] } });\r\n\r\n    const handleSubmit = async () => {\r\n        if (!file) return alert('Please upload a file first.');\r\n        setLoading(true);\r\n        setSubmitStatus('Submitting...');\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        try {\r\n            const response = await axios.post('http://127.0.0.1:8000/api/upload/', formData, {\r\n                headers: { 'Content-Type': 'multipart/form-data' },\r\n            });\r\n            setSubmitStatus('File uploaded successfully!');\r\n            console.log('Upload response:', response.data);\r\n            // Optionally store a file ID or name from response if provided\r\n        } catch (error) {\r\n            setSubmitStatus('Failed to upload file. Please try again.');\r\n            console.error('Upload error:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchContent = async (endpoint) => {\r\n        if (!file) return alert('Please upload a file first.');\r\n        setLoading(true);\r\n        try {\r\n            let response;\r\n            // Use GET with file name as a query parameter (adjust based on backend expectation)\r\n            const fileName = encodeURIComponent(file.name);\r\n            if (endpoint === 'ppt') {\r\n                response = await axios.get(`http://127.0.0.1:8000/api/generate_${endpoint}/?file=${fileName}`, {\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                });\r\n                if (response.data.message === 'PPT generated successfully') {\r\n                    const pptUrl = `http://127.0.0.1:8000/${response.data.ppt_file}`;\r\n                    setPptFileUrl(pptUrl);\r\n                    const link = document.createElement('a');\r\n                    link.href = pptUrl;\r\n                    link.download = 'presentation.pptx';\r\n                    document.body.appendChild(link);\r\n                    link.click();\r\n                    document.body.removeChild(link);\r\n                } else {\r\n                    throw new Error('PPT generation failed');\r\n                }\r\n            } else {\r\n                response = await axios.get(`http://127.0.0.1:8000/api/generate_${endpoint}/?file=${fileName}`, {\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                });\r\n                if (endpoint === 'summary') setSummary(response.data.summary || '');\r\n                else if (endpoint === 'notes') setNotes(response.data.notes || '');\r\n            }\r\n        } catch (error) {\r\n            console.error(`Error fetching ${endpoint}:`, error);\r\n            alert(`Failed to fetch ${endpoint}. Check console for details.`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"landing-page\">\r\n            <Header userName={userName} />\r\n            <h2 className=\"page-title\">AutoReQ</h2>\r\n            <div className=\"wrapper-for-drop\">\r\n                <div {...getRootProps()} className=\"dropzone\">\r\n                    <input {...getInputProps()} />\r\n                    <p className=\"dropzone-text\">Drag and drop a .txt or .docx file here, or click to select</p>\r\n                    {file && <p className=\"file-name\">{file.name}</p>}\r\n                </div>\r\n            </div>\r\n            <button onClick={handleSubmit} className=\"submit-button\" disabled={loading}>\r\n                {loading ? 'Submitting...' : 'Submit'}\r\n            </button>\r\n            {submitStatus && <p className=\"submit-status\">{submitStatus}</p>}\r\n            <div className=\"button-group\">\r\n                <button onClick={() => fetchContent('summary')} className=\"action-button\" disabled={loading}>\r\n                    Generate Summary\r\n                </button>\r\n                <button onClick={() => fetchContent('notes')} className=\"action-button\" disabled={loading}>\r\n                    Generate Notes\r\n                </button>\r\n                <button onClick={() => fetchContent('ppt')} className=\"action-button\" disabled={loading}>\r\n                    Generate PPT\r\n                </button>\r\n            </div>\r\n            {(summary || notes || pptFileUrl) && (\r\n                <div className=\"content-box\">\r\n                    {summary && <div className=\"content-section\"><h3>Summary</h3><p>{summary}</p></div>}\r\n                    {notes && <div className=\"content-section\"><h3>Notes</h3><p>{notes}</p></div>}\r\n                    {pptFileUrl && (\r\n                        <div className=\"content-section\">\r\n                            <h3>PPT Generated</h3>\r\n                            <p>Download completed. Check your downloads folder.</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LandingPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}